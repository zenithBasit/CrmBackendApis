// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"fmt"
	"io"
	"strconv"
)

type Activity struct {
	ActivityID           string `json:"activity_id"`
	ActivityType         string `json:"activityType"`
	DateTime             string `json:"dateTime"`
	CommunicationChannel string `json:"communicationChannel"`
	ContentNotes         string `json:"contentNotes"`
	ParticipantDetails   string `json:"participantDetails"`
	FollowUpActions      string `json:"followUpActions"`
	LeadID               string `json:"leadId"`
}

type AuthPayload struct {
	Token string `json:"token"`
	User  *User  `json:"user"`
}

type Campaign struct {
	CampaignID       string  `json:"campaignID"`
	CampaignName     string  `json:"campaignName"`
	CampaignCountry  string  `json:"campaignCountry"`
	CampaignRegion   string  `json:"campaignRegion"`
	IndustryTargeted string  `json:"industryTargeted"`
	Users            []*User `json:"users"`
}

type CreateActivityInput struct {
	ActivityType         string `json:"activityType"`
	DateTime             string `json:"dateTime"`
	CommunicationChannel string `json:"communicationChannel"`
	ContentNotes         string `json:"contentNotes"`
	ParticipantDetails   string `json:"participantDetails"`
	FollowUpActions      string `json:"followUpActions"`
	LeadID               string `json:"leadId"`
}

type CreateLeadInput struct {
	Firstname          string       `json:"firstname"`
	Lastname           string       `json:"lastname"`
	ContactInformation string       `json:"contactInformation"`
	LeadSource         string       `json:"leadSource"`
	InitialContactDate string       `json:"initialContactDate"`
	LeadOwner          string       `json:"leadOwner"`
	LeadStatus         LeadStatus   `json:"leadStatus"`
	LeadScore          int32        `json:"leadScore"`
	LeadPriority       LeadPriority `json:"leadPriority"`
	LeadNotes          string       `json:"leadNotes"`
}

type CreateLeadWithActivityInput struct {
	Firstname            string       `json:"firstname"`
	Lastname             string       `json:"lastname"`
	ContactInformation   string       `json:"contactInformation"`
	LeadSource           string       `json:"leadSource"`
	InitialContactDate   string       `json:"initialContactDate"`
	LeadOwner            string       `json:"leadOwner"`
	LeadStatus           LeadStatus   `json:"leadStatus"`
	LeadScore            int32        `json:"leadScore"`
	LeadPriority         LeadPriority `json:"leadPriority"`
	LeadNotes            string       `json:"leadNotes"`
	ActivityType         string       `json:"activityType"`
	DateTime             string       `json:"dateTime"`
	CommunicationChannel string       `json:"communicationChannel"`
	ContentNotes         string       `json:"contentNotes"`
	ParticipantDetails   string       `json:"participantDetails"`
	FollowUpActions      string       `json:"followUpActions"`
}

type CreateUserInput struct {
	GoogleID *string  `json:"googleId,omitempty"`
	Name     string   `json:"name"`
	Password string   `json:"password"`
	Email    string   `json:"email"`
	Phone    *string  `json:"phone,omitempty"`
	Role     UserRole `json:"role"`
}

type Lead struct {
	LeadID             string       `json:"lead_id"`
	Firstname          string       `json:"firstname"`
	Lastname           string       `json:"lastname"`
	ContactInformation string       `json:"contactInformation"`
	LeadSource         string       `json:"leadSource"`
	InitialContactDate string       `json:"initialContactDate"`
	LeadOwner          string       `json:"leadOwner"`
	LeadStatus         LeadStatus   `json:"leadStatus"`
	LeadScore          int32        `json:"leadScore"`
	LeadPriority       LeadPriority `json:"leadPriority"`
	LeadNotes          string       `json:"leadNotes"`
	Activities         []*Activity  `json:"activities,omitempty"`
}

type Mutation struct {
}

type Query struct {
}

type UpdateActivityInput struct {
	ActivityType         *string `json:"activityType,omitempty"`
	DateTime             *string `json:"dateTime,omitempty"`
	CommunicationChannel *string `json:"communicationChannel,omitempty"`
	ContentNotes         *string `json:"contentNotes,omitempty"`
	ParticipantDetails   *string `json:"participantDetails,omitempty"`
	FollowUpActions      *string `json:"followUpActions,omitempty"`
}

type UpdateLeadInput struct {
	Firstname          *string       `json:"firstname,omitempty"`
	Lastname           *string       `json:"lastname,omitempty"`
	ContactInformation *string       `json:"contactInformation,omitempty"`
	LeadSource         *string       `json:"leadSource,omitempty"`
	InitialContactDate *string       `json:"initialContactDate,omitempty"`
	LeadOwner          *string       `json:"leadOwner,omitempty"`
	LeadStatus         *LeadStatus   `json:"leadStatus,omitempty"`
	LeadScore          *int32        `json:"leadScore,omitempty"`
	LeadPriority       *LeadPriority `json:"leadPriority,omitempty"`
	LeadNotes          *string       `json:"leadNotes,omitempty"`
}

type UpdateUserInput struct {
	Name  *string   `json:"name,omitempty"`
	Email *string   `json:"email,omitempty"`
	Phone *string   `json:"phone,omitempty"`
	Role  *UserRole `json:"role,omitempty"`
}

type User struct {
	UserID    string      `json:"userID"`
	GoogleID  *string     `json:"googleId,omitempty"`
	Name      string      `json:"name"`
	Email     string      `json:"email"`
	Phone     string      `json:"phone"`
	Role      string      `json:"role"`
	Password  string      `json:"password"`
	Campaigns []*Campaign `json:"campaigns"`
}

type LeadPriority string

const (
	LeadPriorityHigh   LeadPriority = "HIGH"
	LeadPriorityMedium LeadPriority = "MEDIUM"
	LeadPriorityLow    LeadPriority = "LOW"
)

var AllLeadPriority = []LeadPriority{
	LeadPriorityHigh,
	LeadPriorityMedium,
	LeadPriorityLow,
}

func (e LeadPriority) IsValid() bool {
	switch e {
	case LeadPriorityHigh, LeadPriorityMedium, LeadPriorityLow:
		return true
	}
	return false
}

func (e LeadPriority) String() string {
	return string(e)
}

func (e *LeadPriority) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LeadPriority(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LeadPriority", str)
	}
	return nil
}

func (e LeadPriority) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LeadStatus string

const (
	LeadStatusNew        LeadStatus = "NEW"
	LeadStatusInProgress LeadStatus = "IN_PROGRESS"
	LeadStatusFollowUp   LeadStatus = "FOLLOW_UP"
	LeadStatusClosedWon  LeadStatus = "CLOSED_WON"
	LeadStatusClosedLost LeadStatus = "CLOSED_LOST"
)

var AllLeadStatus = []LeadStatus{
	LeadStatusNew,
	LeadStatusInProgress,
	LeadStatusFollowUp,
	LeadStatusClosedWon,
	LeadStatusClosedLost,
}

func (e LeadStatus) IsValid() bool {
	switch e {
	case LeadStatusNew, LeadStatusInProgress, LeadStatusFollowUp, LeadStatusClosedWon, LeadStatusClosedLost:
		return true
	}
	return false
}

func (e LeadStatus) String() string {
	return string(e)
}

func (e *LeadStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LeadStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LeadStatus", str)
	}
	return nil
}

func (e LeadStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserRole string

const (
	UserRoleAdmin          UserRole = "ADMIN"
	UserRoleSalesExecutive UserRole = "SALES_EXECUTIVE"
	UserRoleManager        UserRole = "MANAGER"
)

var AllUserRole = []UserRole{
	UserRoleAdmin,
	UserRoleSalesExecutive,
	UserRoleManager,
}

func (e UserRole) IsValid() bool {
	switch e {
	case UserRoleAdmin, UserRoleSalesExecutive, UserRoleManager:
		return true
	}
	return false
}

func (e UserRole) String() string {
	return string(e)
}

func (e *UserRole) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserRole", str)
	}
	return nil
}

func (e UserRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
