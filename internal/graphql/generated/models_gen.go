// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"fmt"
	"io"
	"strconv"
)

type Activity struct {
	ActivityID           string `json:"activity_id"`
	ActivityType         string `json:"activityType"`
	DateTime             string `json:"dateTime"`
	CommunicationChannel string `json:"communicationChannel"`
	ContentNotes         string `json:"contentNotes"`
	ParticipantDetails   string `json:"participantDetails"`
	FollowUpActions      string `json:"followUpActions"`
	LeadID               string `json:"leadId"`
}

type AuthPayload struct {
	Token string `json:"token"`
	User  *User  `json:"user"`
}

type Campaign struct {
	CampaignID       string  `json:"campaignID"`
	CampaignName     string  `json:"campaignName"`
	CampaignCountry  string  `json:"campaignCountry"`
	CampaignRegion   string  `json:"campaignRegion"`
	IndustryTargeted string  `json:"industryTargeted"`
	Users            []*User `json:"users"`
	Leads            []*Lead `json:"leads"`
}

type CreateActivityInput struct {
	ActivityType         string `json:"activityType"`
	DateTime             string `json:"dateTime"`
	CommunicationChannel string `json:"communicationChannel"`
	ContentNotes         string `json:"contentNotes"`
	ParticipantDetails   string `json:"participantDetails"`
	FollowUpActions      string `json:"followUpActions"`
	LeadID               string `json:"leadId"`
}

type CreateCampaignInput struct {
	CampaignName     string `json:"campaignName"`
	CampaignCountry  string `json:"campaignCountry"`
	CampaignRegion   string `json:"campaignRegion"`
	IndustryTargeted string `json:"industryTargeted"`
}

type CreateDealInput struct {
	DealName            string     `json:"dealName"`
	LeadID              string     `json:"leadID"`
	DealStartDate       string     `json:"dealStartDate"`
	DealEndDate         string     `json:"dealEndDate"`
	ProjectRequirements string     `json:"ProjectRequirements"`
	DealAmount          string     `json:"dealAmount"`
	DealStatus          DealStatus `json:"dealStatus"`
}

type CreateLeadInput struct {
	FirstName          string       `json:"firstName"`
	LastName           string       `json:"lastName"`
	Email              string       `json:"email"`
	LinkedIn           string       `json:"linkedIn"`
	Country            string       `json:"country"`
	Phone              string       `json:"phone"`
	LeadSource         string       `json:"leadSource"`
	InitialContactDate string       `json:"initialContactDate"`
	LeadAssignedTo     string       `json:"leadAssignedTo"`
	LeadStage          LeadStage    `json:"leadStage"`
	LeadNotes          string       `json:"leadNotes"`
	LeadPriority       LeadPriority `json:"leadPriority"`
	OrganizationID     string       `json:"organizationID"`
	CampaignID         string       `json:"campaignID"`
}

type CreateLeadWithActivityInput struct {
	Firstname            string       `json:"firstname"`
	Lastname             string       `json:"lastname"`
	Email                string       `json:"email"`
	LinkedIn             string       `json:"linkedIn"`
	Country              string       `json:"country"`
	Phone                string       `json:"phone"`
	LeadSource           string       `json:"leadSource"`
	InitialContactDate   string       `json:"initialContactDate"`
	LeadAssignedTo       string       `json:"leadAssignedTo"`
	LeadStage            LeadStage    `json:"leadStage"`
	LeadNotes            string       `json:"leadNotes"`
	LeadPriority         LeadPriority `json:"leadPriority"`
	OrganizationID       string       `json:"organizationID"`
	CampaignID           string       `json:"campaignID"`
	ActivityType         string       `json:"activityType"`
	DateTime             string       `json:"dateTime"`
	CommunicationChannel string       `json:"communicationChannel"`
	ContentNotes         string       `json:"contentNotes"`
	ParticipantDetails   string       `json:"participantDetails"`
	FollowUpActions      string       `json:"followUpActions"`
}

type CreateOrganizationInput struct {
	OrganizationName    string  `json:"organizationName"`
	OrganizationEmail   string  `json:"organizationEmail"`
	OrganizationWebsite *string `json:"organizationWebsite,omitempty"`
	City                string  `json:"city"`
	Country             string  `json:"country"`
	NoOfEmployees       string  `json:"noOfEmployees"`
	AnnualRevenue       string  `json:"annualRevenue"`
}

type CreateUserInput struct {
	GoogleID *string  `json:"googleId,omitempty"`
	Name     string   `json:"name"`
	Password string   `json:"password"`
	Email    string   `json:"email"`
	Phone    *string  `json:"phone,omitempty"`
	Role     UserRole `json:"role"`
}

type Deal struct {
	DealID              string `json:"dealID"`
	DealName            string `json:"dealName"`
	LeadID              string `json:"leadID"`
	DealStartDate       string `json:"dealStartDate"`
	DealEndDate         string `json:"dealEndDate"`
	ProjectRequirements string `json:"ProjectRequirements"`
	DealAmount          string `json:"dealAmount"`
	DealStatus          string `json:"dealStatus"`
}

type Lead struct {
	LeadID             string        `json:"leadID"`
	FirstName          string        `json:"firstName"`
	LastName           string        `json:"lastName"`
	Email              string        `json:"email"`
	LinkedIn           string        `json:"linkedIn"`
	Country            string        `json:"country"`
	Phone              string        `json:"phone"`
	LeadSource         string        `json:"leadSource"`
	InitialContactDate string        `json:"initialContactDate"`
	LeadCreatedBy      *User         `json:"leadCreatedBy"`
	LeadAssignedTo     *User         `json:"leadAssignedTo"`
	LeadStage          string        `json:"leadStage"`
	LeadNotes          string        `json:"leadNotes"`
	LeadPriority       string        `json:"leadPriority"`
	Organization       *Organization `json:"organization"`
	Campaign           *Campaign     `json:"campaign"`
	Activities         []*Activity   `json:"activities"`
}

type Mutation struct {
}

type Organization struct {
	ID                  string  `json:"ID"`
	OrganizationName    string  `json:"organizationName"`
	OrganizationEmail   string  `json:"organizationEmail"`
	OrganizationWebsite *string `json:"organizationWebsite,omitempty"`
	City                string  `json:"city"`
	Country             string  `json:"country"`
	NoOfEmployees       string  `json:"noOfEmployees"`
	AnnualRevenue       string  `json:"annualRevenue"`
	Leads               []*Lead `json:"leads"`
}

type Query struct {
}

type UpdateActivityInput struct {
	ActivityType         *string `json:"activityType,omitempty"`
	DateTime             *string `json:"dateTime,omitempty"`
	CommunicationChannel *string `json:"communicationChannel,omitempty"`
	ContentNotes         *string `json:"contentNotes,omitempty"`
	ParticipantDetails   *string `json:"participantDetails,omitempty"`
	FollowUpActions      *string `json:"followUpActions,omitempty"`
}

type UpdateLeadInput struct {
	FirstName          *string      `json:"firstName,omitempty"`
	LastName           *string      `json:"lastName,omitempty"`
	Email              string       `json:"email"`
	LinkedIn           *string      `json:"linkedIn,omitempty"`
	Country            *string      `json:"country,omitempty"`
	Phone              *string      `json:"phone,omitempty"`
	LeadSource         string       `json:"leadSource"`
	InitialContactDate string       `json:"initialContactDate"`
	LeadAssignedTo     string       `json:"leadAssignedTo"`
	LeadStage          LeadStage    `json:"leadStage"`
	LeadNotes          string       `json:"leadNotes"`
	LeadPriority       LeadPriority `json:"leadPriority"`
	OrganizationID     string       `json:"organizationID"`
	CampaignID         string       `json:"campaignID"`
}

type UpdateUserInput struct {
	Name  *string   `json:"name,omitempty"`
	Email *string   `json:"email,omitempty"`
	Phone *string   `json:"phone,omitempty"`
	Role  *UserRole `json:"role,omitempty"`
}

type User struct {
	UserID    string      `json:"userID"`
	GoogleID  *string     `json:"googleId,omitempty"`
	Name      string      `json:"name"`
	Email     string      `json:"email"`
	Phone     string      `json:"phone"`
	Role      string      `json:"role"`
	Password  string      `json:"password"`
	Campaigns []*Campaign `json:"campaigns"`
}

type LeadPriority string

const (
	LeadPriorityHigh   LeadPriority = "HIGH"
	LeadPriorityMedium LeadPriority = "MEDIUM"
	LeadPriorityLow    LeadPriority = "LOW"
)

var AllLeadPriority = []LeadPriority{
	LeadPriorityHigh,
	LeadPriorityMedium,
	LeadPriorityLow,
}

func (e LeadPriority) IsValid() bool {
	switch e {
	case LeadPriorityHigh, LeadPriorityMedium, LeadPriorityLow:
		return true
	}
	return false
}

func (e LeadPriority) String() string {
	return string(e)
}

func (e *LeadPriority) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LeadPriority(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LeadPriority", str)
	}
	return nil
}

func (e LeadPriority) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LeadStage string

const (
	LeadStageNew        LeadStage = "NEW"
	LeadStageInProgress LeadStage = "IN_PROGRESS"
	LeadStageFollowUp   LeadStage = "FOLLOW_UP"
	LeadStageClosedWon  LeadStage = "CLOSED_WON"
	LeadStageClosedLost LeadStage = "CLOSED_LOST"
)

var AllLeadStage = []LeadStage{
	LeadStageNew,
	LeadStageInProgress,
	LeadStageFollowUp,
	LeadStageClosedWon,
	LeadStageClosedLost,
}

func (e LeadStage) IsValid() bool {
	switch e {
	case LeadStageNew, LeadStageInProgress, LeadStageFollowUp, LeadStageClosedWon, LeadStageClosedLost:
		return true
	}
	return false
}

func (e LeadStage) String() string {
	return string(e)
}

func (e *LeadStage) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LeadStage(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LeadStage", str)
	}
	return nil
}

func (e LeadStage) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserRole string

const (
	UserRoleAdmin          UserRole = "ADMIN"
	UserRoleSalesExecutive UserRole = "SALES_EXECUTIVE"
	UserRoleManager        UserRole = "MANAGER"
)

var AllUserRole = []UserRole{
	UserRoleAdmin,
	UserRoleSalesExecutive,
	UserRoleManager,
}

func (e UserRole) IsValid() bool {
	switch e {
	case UserRoleAdmin, UserRoleSalesExecutive, UserRoleManager:
		return true
	}
	return false
}

func (e UserRole) String() string {
	return string(e)
}

func (e *UserRole) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserRole", str)
	}
	return nil
}

func (e UserRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DealStatus string

const (
	DealStatusStarted   DealStatus = "STARTED"
	DealStatusPending   DealStatus = "PENDING"
	DealStatusCompleted DealStatus = "COMPLETED"
)

var AllDealStatus = []DealStatus{
	DealStatusStarted,
	DealStatusPending,
	DealStatusCompleted,
}

func (e DealStatus) IsValid() bool {
	switch e {
	case DealStatusStarted, DealStatusPending, DealStatusCompleted:
		return true
	}
	return false
}

func (e DealStatus) String() string {
	return string(e)
}

func (e *DealStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DealStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid dealStatus", str)
	}
	return nil
}

func (e DealStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
