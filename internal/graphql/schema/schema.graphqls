type Query {
  getUsers(
    filter: UserFilter
    pagination: PaginationInput
    sort: UserSortInput
  ): UserPage!
  getUser(userID: ID!): User

  getCampaigns(
    filter: CampaignFilter, 
    pagination: PaginationInput, 
    sort: CampaignSortInput
  ): CampaignPage!
  getCampaign(campaignID: ID!): Campaign

  getAllLeads(
    filter: LeadFilter, 
    pagination: PaginationInput, 
    sort: LeadSortInput
  ): LeadPage!
  getOneLead(lead_id: String!): Lead
  me: User

  getOrganizations: [Organization!]!
  getOrganizationByID(id: ID!): Organization!

  getResourceProfiles(
    filter: ResourceProfileFilter
    pagination: PaginationInput
    sort: ResourceProfileSortInput
  ): ResourceProfilePage!
  getVendors(
    filter: VendorFilter
    pagination: PaginationInput
    sort: VendorSortInput
  ): VendorPage!
  getResourceProfile(id: ID!): ResourceProfile
  getVendor(id: ID!): Vendor
}

type Mutation {
  login(email: String!, password: String!): AuthPayload!

  createUser(input: CreateUserInput!): User!
  updateUser(user_id: ID!, input: UpdateUserInput!): User!
  deleteUser(user_id: ID!): User!

  createOrganization(input: CreateOrganizationInput!): Organization!

  createCampaign(input: CreateCampaignInput!): Campaign!
  addUserToCampaign(userID: ID!, campaignID: ID!): Campaign!
  removeUserFromCampaign(userID: ID!, campaignID: ID!): Campaign!

  createLead(input: CreateLeadInput!): Lead!
  updateLead(lead_id: ID!, input: UpdateLeadInput!): Lead!
  deleteLead(lead_id: ID!): Lead!
  createLeadWithActivity(input: CreateLeadWithActivityInput!): Lead!

  createDeal(input: CreateDealInput!): Deal!

  createActivity(input: CreateActivityInput!): Activity!
  updateActivity(activity_id: ID!, input: UpdateActivityInput!): Activity!
  deleteActivity(activity_id: ID!): Activity!

  createResourceProfile(input: CreateResourceProfileInput!): ResourceProfile!
  updateResourceProfile(
    id: ID!
    input: UpdateResourceProfileInput!
  ): ResourceProfile!
  deleteResourceProfile(id: ID!): ResourceProfile!

  createVendor(input: CreateVendorInput!): Vendor!
  updateVendor(id: ID!, input: UpdateVendorInput!): Vendor!
  deleteVendor(id: ID!): Vendor!
}

enum UserRole {
  ADMIN
  SALES_EXECUTIVE
  MANAGER
}
type AuthPayload {
  token: String!
  user: User!
}

type Campaign {
  campaignID: ID!
  campaignName: String!
  campaignCountry: String!
  campaignRegion: String!
  industryTargeted: String!
  users: [User!]!
  leads: [Lead!]! # One Campaign can have multiple Leads
}

type User {
  userID: ID!
  googleId: String
  name: String!
  email: String!
  phone: String!
  role: String!
  password: String!
  campaigns: [Campaign!]!
}

enum LeadPriority {
  HIGH
  MEDIUM
  LOW
}

enum LeadStage {
  NEW
  IN_PROGRESS
  FOLLOW_UP
  CLOSED_WON
  CLOSED_LOST
}

type Lead {
  leadID: ID!
  firstName: String!
  lastName: String!
  email: String!
  linkedIn: String!
  country: String!
  phone: String!
  leadSource: String!
  initialContactDate: String!
  leadCreatedBy: User!
  leadAssignedTo: User!
  leadStage: String!
  leadNotes: String!
  leadPriority: String!
  organization: Organization!
  campaign: Campaign!
  activities: [Activity!]!
}

type Organization {
  ID: ID!
  organizationName: String!
  organizationEmail: String!
  organizationWebsite: String
  city: String!
  country: String!
  noOfEmployees: String!
  annualRevenue: String!
  leads: [Lead!]! # One Organization can have multiple Leads
}

type Activity {
  activity_id: ID!
  activityType: String!
  dateTime: String!
  communicationChannel: String!
  contentNotes: String!
  participantDetails: String!
  followUpActions: String!
  leadId: ID!
}

type Deal {
  dealID: ID!
  dealName: String!
  leadID: ID!
  dealStartDate: String!
  dealEndDate: String!
  ProjectRequirements: String!
  dealAmount: String!
  dealStatus: String!
}

input CreateDealInput {
  dealName: String!
  leadID: ID!
  dealStartDate: String!
  dealEndDate: String!
  ProjectRequirements: String!
  dealAmount: String!
  dealStatus: dealStatus!
}

enum dealStatus {
  STARTED
  PENDING
  COMPLETED
}

input CreateCampaignInput {
  campaignName: String!
  campaignCountry: String!
  campaignRegion: String!
  industryTargeted: String!
}
input CreateUserInput {
  googleId: String
  name: String!
  password: String!
  email: String!
  phone: String
  role: UserRole!
}

input UpdateUserInput {
  name: String
  email: String
  phone: String
  role: UserRole
}

input CreateLeadWithActivityInput {
  firstname: String!
  lastname: String!
  email: String!
  linkedIn: String!
  country: String!
  phone: String!
  leadSource: String!
  initialContactDate: String!
  leadAssignedTo: ID!
  leadStage: LeadStage!
  leadNotes: String!
  leadPriority: LeadPriority!
  organizationID: String!
  campaignID: String!
  activityType: String!
  dateTime: String!
  communicationChannel: String!
  contentNotes: String!
  participantDetails: String!
  followUpActions: String!
}

input CreateLeadInput {
  firstName: String!
  lastName: String!
  email: String!
  linkedIn: String!
  country: String!
  phone: String!
  leadSource: String!
  initialContactDate: String!
  leadAssignedTo: ID!
  leadStage: LeadStage!
  leadNotes: String!
  leadPriority: LeadPriority!
  organizationID: String!
  campaignID: String!
}

input UpdateLeadInput {
  firstName: String
  lastName: String
  email: String!
  linkedIn: String
  country: String
  phone: String
  leadSource: String!
  initialContactDate: String!
  leadAssignedTo: String!
  leadStage: LeadStage!
  leadNotes: String!
  leadPriority: LeadPriority!
  organizationID: String!
  campaignID: String!
}

input CreateActivityInput {
  activityType: String!
  dateTime: String!
  communicationChannel: String!
  contentNotes: String!
  participantDetails: String!
  followUpActions: String!
  leadId: ID!
}

input UpdateActivityInput {
  activityType: String
  dateTime: String
  communicationChannel: String
  contentNotes: String
  participantDetails: String
  followUpActions: String
}

input CreateOrganizationInput {
  organizationName: String!
  organizationEmail: String!
  organizationWebsite: String
  city: String!
  country: String!
  noOfEmployees: String!
  annualRevenue: String!
}

enum ResourceType {
  CONSULTANT
  FREELANCER
  CONTRACTOR
  EMPLOYEE
}

enum ResourceStatus {
  ACTIVE
  INACTIVE
  ON_BENCH
}

enum VendorStatus {
  ACTIVE
  INACTIVE
  PREFERRED
}

enum PaymentTerms {
  NET_30
  NET_60
  NET_90
}

type ResourceProfile {
  id: ID!
  createdAt: String!
  updatedAt: String!
  type: ResourceType!
  firstName: String!
  lastName: String!
  totalExperience: Float!
  contactInformation: String!
  googleDriveLink: String
  status: ResourceStatus!
  vendorId: ID
  vendor: Vendor
  skills: [Skill!]!
  pastProjects: [PastProject!]!
}

type Vendor {
  id: ID!
  createdAt: String!
  updatedAt: String!
  companyName: String!
  status: VendorStatus!
  paymentTerms: PaymentTerms!
  address: String!
  gstOrVatDetails: String
  notes: String
  contactList: [Contact!]!
  skills: [Skill!]!
  performanceRatings: [PerformanceRating!]!
  resources: [ResourceProfile!]!
}
# --- Supporting Types ---
type Skill {
  id: ID!
  createdAt: String!
  updatedAt: String!
  name: String!
  description: String
}

type PastProject {
  id: ID!
  createdAt: String!
  updatedAt: String!
  resourceProfileId: ID!
  projectName: String!
  description: String
}

type Contact {
  id: ID!
  createdAt: String!
  updatedAt: String!
  vendorId: ID!
  name: String!
  email: String
  phoneNumber: String
}

type PerformanceRating {
  id: ID!
  createdAt: String!
  updatedAt: String!
  vendorId: ID!
  rating: Int!
  review: String
}

# --- Inputs for Mutations ---

input CreateResourceProfileInput {
  type: ResourceType!
  firstName: String!
  lastName: String!
  totalExperience: Float!
  contactInformation: String!
  googleDriveLink: String
  status: ResourceStatus!
  vendorId: ID
  skillIds: [ID!] # Allow passing skill IDs directly
  pastProjectIds: [ID!]
}

input UpdateResourceProfileInput {
  type: ResourceType
  firstName: String
  lastName: String
  totalExperience: Float
  contactInformation: String
  googleDriveLink: String
  status: ResourceStatus
  vendorId: ID
  skillIds: [ID!] # Allow passing skill IDs directly
  pastProjectIds: [ID!]
}

input CreateVendorInput {
  companyName: String!
  status: VendorStatus!
  paymentTerms: PaymentTerms!
  address: String!
  gstOrVatDetails: String
  notes: String
  skillIds: [ID!] # Allow passing skill IDs directly
}

input UpdateVendorInput {
  companyName: String
  status: VendorStatus
  paymentTerms: PaymentTerms
  address: String
  gstOrVatDetails: String
  notes: String
  skillIds: [ID!] # Allow passing skill IDs directly
}

# --- Filter Inputs ---

input UserFilter {
  name: String
  email: String
  role: String
  search: String # Search across name, email, etc.
}

input LeadFilter {
  name: String
  email: String
}

input CampaignFilter {
  campaignName: String
  campaignCountry: String
}

input ResourceProfileFilter {
  type: ResourceType
  firstName: String
  lastName: String
  totalExperienceMin: Float
  totalExperienceMax: Float
  status: ResourceStatus
  vendorId: ID
  skillIds: [ID!] # Filter by associated skill IDs
  search: String # Combined search across firstName, lastName, and vendor.companyName (if vendor is joined)
}

input VendorFilter {
  companyName: String
  status: VendorStatus
  paymentTerms: PaymentTerms
  search: String # Combined search across companyName and address.
  skillIds: [ID!] # Filter by associated skill IDs
}

# --- Pagination ---

input PaginationInput {
  page: Int!
  pageSize: Int!
}
# Return types must be wrapped in a container for pagination.
type ResourceProfilePage {
  items: [ResourceProfile!]!
  totalCount: Int!
}

type UserPage {
  items: [User!]!
  totalCount: Int!
}

type CampaignPage {
  items: [Campaign!]!
  totalCount: Int!
}

type LeadPage {
  items: [Lead!]!
  totalCount: Int!
}

type VendorPage {
  items: [Vendor!]!
  totalCount: Int! # Corrected: Added the type
}

# --- Sorting ---

enum SortOrder {
  ASC
  DESC
}

input UserSortInput {
  field: UserSortField!
  order: SortOrder!
}
enum UserSortField {
  createdAt
  name
  email
  role
}

input CampaignSortInput {
  field: CampaignSortField!
  order: SortOrder!
}
enum CampaignSortField {
  CAMPAIGN_NAME
  CREATED_AT
}

input LeadSortInput {
  field: LeadSortField!
  order: SortOrder!
}
enum LeadSortField {
  LEAD_NAME
  CREATED_AT
}

input ResourceProfileSortInput {
  field: ResourceProfileSortField!
  order: SortOrder!
}

enum ResourceProfileSortField {
  createdAt
  updatedAt
  firstName
  lastName
  totalExperience
  status
}
input VendorSortInput {
  field: VendorSortField!
  order: SortOrder!
}
enum VendorSortField {
  createdAt
  updatedAt
  companyName
  status
}
