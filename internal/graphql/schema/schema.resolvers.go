package schema

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"errors"
	"fmt"

	initializers "github.com/Zenithive/it-crm-backend/Initializers"
	"github.com/Zenithive/it-crm-backend/auth"
	"github.com/Zenithive/it-crm-backend/internal/graphql/generated"
	"github.com/Zenithive/it-crm-backend/models"
	"github.com/google/uuid"
	"golang.org/x/crypto/bcrypt"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input generated.CreateUserInput) (*generated.User, error) {

	if input.Name == "" {
		return nil, fmt.Errorf("name is required")
	}
	if input.Email == "" {
		return nil, fmt.Errorf("email is required")
	}
	if input.Password == "" {
		return nil, fmt.Errorf("password is required")
	}
	if input.Role == "" {
		return nil, fmt.Errorf("role is required")
	}
	if input.Role != "ADMIN" && input.Role != "SALES_EXECUTIVE" && input.Role != "MANAGER" {
		return nil, fmt.Errorf("invalid role")
	}

	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(input.Password), bcrypt.DefaultCost)
	if initializers.DB != nil {
		user := models.User{
			ID:       uuid.NewString(),
			GoogleId: *input.GoogleID,
			Name:     input.Name,
			Email:    input.Email,
			Phone:    *input.Phone,
			Password: string(hashedPassword),
			Role:     string(input.Role),
		}
		if err != nil {
			return nil, fmt.Errorf("failed to hash password: %v", err)
		}
		result := initializers.DB.Create(&user)
		if result.Error != nil {
			return nil, result.Error
		}
		return &generated.User{
			ID:       user.ID,
			GoogleID: &user.GoogleId,
			Name:     user.Name,
			Email:    user.Email,
			Phone:    &user.Phone,
			Password: user.Password,
			Role:     generated.UserRole(user.Role),
		}, nil
	}
	return nil, fmt.Errorf("database connection is nil")
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input generated.UpdateUserInput) (*generated.User, error) {
	// panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
	fmt.Println("Hello, world!")
	if initializers.DB == nil {
		return nil, fmt.Errorf("database connection is nil")
	}

	// Find the user by ID
	var user models.User
	if err := initializers.DB.First(&user, "id = ?", id).Error; err != nil {
		return nil, fmt.Errorf("user not found: %v", err)
	}

	// Update the user's fields with the input
	if input.Name != nil {
		user.Name = *input.Name
	}
	if input.Email != nil {
		user.Email = *input.Email
	}
	if input.Phone != nil {
		user.Phone = *input.Phone
	}
	if input.Role != nil {
		user.Role = string(*input.Role)
	}

	// Save the updated user record in the database
	if err := initializers.DB.Save(&user).Error; err != nil {
		return nil, fmt.Errorf("failed to update user: %v", err)
	}

	// Return the updated user
	return &generated.User{
		ID:       user.ID,
		GoogleID: &user.GoogleId,
		Name:     user.Name,
		Email:    user.Email,
		Phone:    &user.Phone,
		Password: user.Password,
		Role:     generated.UserRole(user.Role),
	}, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (*generated.User, error) {

	// panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
	if initializers.DB == nil {
		return nil, fmt.Errorf("database connection is nil")
	}

	// Find the user by ID
	var user models.User
	if err := initializers.DB.First(&user, "id = ?", id).Error; err != nil {
		return nil, fmt.Errorf("user not found: %v", err)
	}
	fmt.Println("User found: ", user)
	// Delete the user record from the database
	if err := initializers.DB.Delete(&user).Error; err != nil {
		return nil, fmt.Errorf("failed to delete user: %v", err)
	}
	fmt.Println("User deleted: ", user)
	// Return the deleted user
	return &generated.User{
		ID:       user.ID,
		GoogleID: &user.GoogleId,
		Name:     user.Name,
		Email:    user.Email,
		Phone:    &user.Phone,
		Password: user.Password,
		Role:     generated.UserRole(user.Role),
	}, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, email string, password string) (*generated.AuthPayload, error) {
	var user models.User
	if err := initializers.DB.Where("email = ?", email).First(&user).Error; err != nil {
		return nil, errors.New("user not found")
	}

	fmt.Println("Passs found: ", user.Password)
	fmt.Println("Passs entered: ", password)
	// Validate password
	err := bcrypt.CompareHashAndPassword([]byte(user.Password), []byte(password))
	if err != nil {
		return nil, errors.New("invalid password")
	}

	// Generate JWT token
	token, err := auth.GenerateJWT(&user)
	if err != nil {
		return nil, errors.New("failed to generate token")
	}

	return &generated.AuthPayload{
		Token: token,
		User: &generated.User{
			ID:       user.ID,
			GoogleID: &user.GoogleId,
			Name:     user.Name,
			Email:    user.Email,
			Phone:    &user.Phone,
			Role:     generated.UserRole(user.Role),
			Password: user.Password,
		},
	}, nil
}

// CreateLead is the resolver for the createLead field.
func (r *mutationResolver) CreateLead(ctx context.Context, input generated.CreateLeadInput) (*generated.Lead, error) {
	panic(fmt.Errorf("not implemented: CreateLead - createLead"))
}

// UpdateLead is the resolver for the updateLead field.
func (r *mutationResolver) UpdateLead(ctx context.Context, id string, input generated.UpdateLeadInput) (*generated.Lead, error) {
	panic(fmt.Errorf("not implemented: UpdateLead - updateLead"))
}

// DeleteLead is the resolver for the deleteLead field.
func (r *mutationResolver) DeleteLead(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteLead - deleteLead"))
}

// CreateActivity is the resolver for the createActivity field.
func (r *mutationResolver) CreateActivity(ctx context.Context, input generated.CreateActivityInput) (*generated.Activity, error) {
	panic(fmt.Errorf("not implemented: CreateActivity - createActivity"))
}

// UpdateActivity is the resolver for the updateActivity field.
func (r *mutationResolver) UpdateActivity(ctx context.Context, id string, input generated.UpdateActivityInput) (*generated.Activity, error) {
	panic(fmt.Errorf("not implemented: UpdateActivity - updateActivity"))
}

// DeleteActivity is the resolver for the deleteActivity field.
func (r *mutationResolver) DeleteActivity(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteActivity - deleteActivity"))
}

// GetAllUsers is the resolver for the getAllUsers field.
func (r *queryResolver) GetAllUsers(ctx context.Context) ([]*generated.User, error) {
	panic(fmt.Errorf("not implemented: GetAllUsers - getAllUsers"))
}

// GetOneUser is the resolver for the getOneUser field.
func (r *queryResolver) GetOneUser(ctx context.Context, id string) (*generated.User, error) {
	panic(fmt.Errorf("not implemented: GetOneUser - getOneUser"))
}

// GetAllLeads is the resolver for the getAllLeads field.
func (r *queryResolver) GetAllLeads(ctx context.Context) ([]*generated.Lead, error) {
	panic(fmt.Errorf("not implemented: GetAllLeads - getAllLeads"))
}

// GetOneLead is the resolver for the getOneLead field.
func (r *queryResolver) GetOneLead(ctx context.Context, id string) (*generated.Lead, error) {
	panic(fmt.Errorf("not implemented: GetOneLead - getOneLead"))
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*generated.User, error) {
	claims, ok := auth.GetUserFromContext(ctx)
	if !ok {
		return nil, errors.New("unauthenticated")
	}

	var user models.User
	if err := initializers.DB.First(&user, "id = ?", claims["user_id"]).Error; err != nil {
		return nil, errors.New("user not found")
	}

	return &generated.User{
		ID:       user.ID,
		GoogleID: &user.GoogleId,
		Name:     user.Name,
		Email:    user.Email,
		Phone:    &user.Phone,
		Role:     generated.UserRole(user.Role),
	}, nil
	// panic(fmt.Errorf("not implemented: Me - me"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
